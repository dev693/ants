/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ants;

import com.sun.imageio.plugins.png.PNGImageReader;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Image;
import java.awt.event.MouseEvent;
import java.io.File;
import java.text.DecimalFormat;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ToolTipManager;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.plaf.ColorUIResource;

/**
 *
 * @author user
 */
public class MainWindow extends javax.swing.JFrame {
     /**
     * Creates new form NewJFrame
     */
    
    public MainWindow() {
       try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    UIManager.put("nimbusOrange", new ColorUIResource(0, 255,0));
                    UIManager.put("control", new ColorUIResource(238, 238, 238));
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        initComponents();
        this.commentTextArea.setBackground(new Color(238, 238, 238));
        this.setIconImage(new ImageIcon("src/ants/ant-icon.png").getImage());
        ToolTipManager.sharedInstance().setDismissDelay(30000);
        
    }
    private int pressedX = 0;
    private int pressedY = 0;
    private boolean mousePressed = false;
    private City selectedCity = null; 
    private boolean moveCity = false;
    private Thread solver = null;
    private DecimalFormat formatter = new DecimalFormat("#0.00");
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        transparencyGroup = new javax.swing.ButtonGroup();
        progressPanel = new javax.swing.JPanel();
        progressBar = new javax.swing.JProgressBar();
        buttonPanel = new javax.swing.JPanel();
        startButton = new javax.swing.JButton();
        paintPanel = new ants.PaintPanel();
        viewPanel = new javax.swing.JPanel();
        autoscaleSwitch = new javax.swing.JToggleButton();
        zoomSlider = new javax.swing.JSlider();
        zoomLabel = new javax.swing.JLabel();
        zoomLabel2 = new javax.swing.JLabel();
        thicknessSlider = new javax.swing.JSlider();
        thicknessLabel = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        parameterPanel = new javax.swing.JPanel();
        pheromonLabel = new javax.swing.JLabel();
        localInformationLabel = new javax.swing.JLabel();
        evaporationLabel = new javax.swing.JLabel();
        evaporationSlider = new javax.swing.JSlider();
        initialPheromonLabel = new javax.swing.JLabel();
        pheromonUpdateLabel = new javax.swing.JLabel();
        evaporationText = new javax.swing.JTextField();
        pheromonText = new javax.swing.JTextField();
        localInformationText = new javax.swing.JTextField();
        initialPheromonText = new javax.swing.JTextField();
        pheromonUpdateText = new javax.swing.JTextField();
        pheromonSlider = new javax.swing.JSlider();
        localInformationSlider = new javax.swing.JSlider();
        initialPheromonSlider = new javax.swing.JSlider();
        pheromonUpdateSlider = new javax.swing.JSlider();
        iterationPanel = new javax.swing.JPanel();
        iterations = new javax.swing.JPanel();
        iterationCaptionLabel = new javax.swing.JLabel();
        antsCaptionLabel = new javax.swing.JLabel();
        iterationsText = new javax.swing.JTextField();
        antsText = new javax.swing.JTextField();
        stopCondition = new javax.swing.JPanel();
        bestStopCheckBox = new javax.swing.JCheckBox();
        averageStopCheckBox = new javax.swing.JCheckBox();
        bestStopText = new javax.swing.JTextField();
        averageStopText = new javax.swing.JTextField();
        optStopCheckBox = new javax.swing.JCheckBox();
        optStopLabel = new javax.swing.JLabel();
        instructionPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        instructionLabel = new javax.swing.JLabel();
        resultPanel = new javax.swing.JPanel();
        infoPanel = new javax.swing.JPanel();
        cityCountLabel = new javax.swing.JLabel();
        commentCaptionLabel = new javax.swing.JLabel();
        cityCountCaptionLabel = new javax.swing.JLabel();
        timeCaptionLabel = new javax.swing.JLabel();
        nameCaptionLabel = new javax.swing.JLabel();
        timeLabel = new javax.swing.JLabel();
        commentScrollBar = new javax.swing.JScrollPane();
        commentTextArea = new javax.swing.JTextArea();
        nameLabel = new javax.swing.JLabel();
        scorePanel = new javax.swing.JPanel();
        scoreTablePanel = new javax.swing.JPanel();
        bestRouteCaptionLabel = new javax.swing.JLabel();
        averageRouteCaptionLabel = new javax.swing.JLabel();
        globalBestLabel = new javax.swing.JLabel();
        globalAverageLabel = new javax.swing.JLabel();
        localBestLabel = new javax.swing.JLabel();
        localAverageLabel = new javax.swing.JLabel();
        scoreHeaderTablePanel = new javax.swing.JPanel();
        globalCaptionLabel = new javax.swing.JLabel();
        localCaptionLabel = new javax.swing.JLabel();
        mainMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        loadMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        showMenu = new javax.swing.JMenu();
        showPheromonLevelMenuItem = new javax.swing.JCheckBoxMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        transparenceLevelCaptionMenuItem = new javax.swing.JMenuItem();
        transparence80MenuItem = new javax.swing.JRadioButtonMenuItem();
        transparence60MenuItem = new javax.swing.JRadioButtonMenuItem();
        transparence40MenuItem = new javax.swing.JRadioButtonMenuItem();
        transparence20MenuItem = new javax.swing.JRadioButtonMenuItem();
        transparence00MenuItem = new javax.swing.JRadioButtonMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ant Colony Optimization");
        setBackground(new java.awt.Color(0, 255, 0));
        setMinimumSize(new java.awt.Dimension(780, 620));
        setName("MainFrame"); // NOI18N

        progressBar.setString("0 % (0 Ameisen)");
        progressBar.setStringPainted(true);

        javax.swing.GroupLayout progressPanelLayout = new javax.swing.GroupLayout(progressPanel);
        progressPanel.setLayout(progressPanelLayout);
        progressPanelLayout.setHorizontalGroup(
            progressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(progressPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(5, 5, 5))
        );
        progressPanelLayout.setVerticalGroup(
            progressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, progressPanelLayout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        startButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        startButton.setText("Start");
        startButton.setMaximumSize(null);
        startButton.setMinimumSize(null);
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(startButton, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                .addGap(5, 5, 5))
        );
        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(startButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        paintPanel.setBackground(new java.awt.Color(255, 255, 255));
        paintPanel.setForeground(new java.awt.Color(255, 255, 255));
        paintPanel.setOpaque(false);
        paintPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                paintPanelMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                paintPanelMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                paintPanelMousePressed(evt);
            }
        });
        paintPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                paintPanelMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout paintPanelLayout = new javax.swing.GroupLayout(paintPanel);
        paintPanel.setLayout(paintPanelLayout);
        paintPanelLayout.setHorizontalGroup(
            paintPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 566, Short.MAX_VALUE)
        );
        paintPanelLayout.setVerticalGroup(
            paintPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        viewPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Ansicht"));
        viewPanel.setPreferredSize(new java.awt.Dimension(300, 166));

        autoscaleSwitch.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        autoscaleSwitch.setSelected(true);
        autoscaleSwitch.setText("Autoskalierung");
        autoscaleSwitch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoscaleChanged(evt);
            }
        });

        zoomSlider.setMajorTickSpacing(10);
        zoomSlider.setMaximum(1000);
        zoomSlider.setMinimum(10);
        zoomSlider.setMinorTickSpacing(10);
        zoomSlider.setSnapToTicks(true);
        zoomSlider.setValue(100);
        zoomSlider.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        zoomSlider.setFocusable(false);
        zoomSlider.setValueIsAdjusting(true);
        zoomSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                zoomChangedHandler(evt);
            }
        });

        zoomLabel.setText("Zoom:");
        zoomLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                zoomLabelMouseClicked(evt);
            }
        });

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, zoomSlider, org.jdesktop.beansbinding.ELProperty.create("${value}"), zoomLabel2, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        thicknessSlider.setMajorTickSpacing(2);
        thicknessSlider.setMaximum(14);
        thicknessSlider.setMinimum(2);
        thicknessSlider.setMinorTickSpacing(2);
        thicknessSlider.setToolTipText("");
        thicknessSlider.setValue(8);
        thicknessSlider.setValueIsAdjusting(true);
        thicknessSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ThicknessChanged(evt);
            }
        });

        thicknessLabel.setText("Stadtgröße:");

        javax.swing.GroupLayout viewPanelLayout = new javax.swing.GroupLayout(viewPanel);
        viewPanel.setLayout(viewPanelLayout);
        viewPanelLayout.setHorizontalGroup(
            viewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, viewPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(viewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(zoomSlider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(autoscaleSwitch, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, viewPanelLayout.createSequentialGroup()
                        .addComponent(zoomLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(zoomLabel2))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, viewPanelLayout.createSequentialGroup()
                        .addComponent(thicknessLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(thicknessSlider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        viewPanelLayout.setVerticalGroup(
            viewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(autoscaleSwitch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(viewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(zoomLabel)
                    .addComponent(zoomLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(zoomSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(thicknessLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(thicknessSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.setPreferredSize(new java.awt.Dimension(300, 469));

        pheromonLabel.setText("<html>Pheromon  &alpha;:");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, pheromonSlider, org.jdesktop.beansbinding.ELProperty.create("${toolTipText}"), pheromonLabel, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        localInformationLabel.setText("<html>lokale Information &beta;:");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, localInformationSlider, org.jdesktop.beansbinding.ELProperty.create("${toolTipText}"), localInformationLabel, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        evaporationLabel.setText("<html>Verdunstunsfaktor &#961;:");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, evaporationSlider, org.jdesktop.beansbinding.ELProperty.create("${toolTipText}"), evaporationLabel, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        evaporationSlider.setMaximum(10001);
        evaporationSlider.setMinimum(1);
        evaporationSlider.setMinorTickSpacing(1);
        evaporationSlider.setToolTipText("<html><b>Verdunstungsfaktor (&#961;): <br>\nIntervall:</b> 0 &le; &#961; &le; 1<br>\n<b>Funktion:</b> Der Verdunstungsfaktor bestimmt den prozentualen Grad<br>\nder Verdunstung der Pheromone auf allen Strecken.<br>\nImmer, wenn eine Ameise ihre Route abschließt, werden Pheromone verdunstet.<br>\n<b>Beispiel:</b> Ein Wert von 0.2 bedeutet, dass 20% der Pheromone<br>\nauf jeder Strecke Verdunsten.<br>\n<b>Wertempfehlung:</b> 0.025");
        evaporationSlider.setValue(250);

        initialPheromonLabel.setText("<html>initiale Pheromone &#964;:");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, initialPheromonSlider, org.jdesktop.beansbinding.ELProperty.create("${toolTipText}"), initialPheromonLabel, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        pheromonUpdateLabel.setText("<html>Pheromon-Update Q:");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, pheromonUpdateSlider, org.jdesktop.beansbinding.ELProperty.create("${toolTipText}"), pheromonUpdateLabel, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        evaporationText.setInputVerifier(new DoubleInputVerifier(0,1));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, evaporationSlider, org.jdesktop.beansbinding.ELProperty.create("${value}"), evaporationText, org.jdesktop.beansbinding.BeanProperty.create("text"), "evaporationBinding");
        binding.setConverter(new DoubleConverter());
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, evaporationSlider, org.jdesktop.beansbinding.ELProperty.create("${toolTipText}"), evaporationText, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        pheromonText.setInputVerifier(new DoubleInputVerifier(0));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, pheromonSlider, org.jdesktop.beansbinding.ELProperty.create("${value}"), pheromonText, org.jdesktop.beansbinding.BeanProperty.create("text"), "pheromonBinding");
        binding.setConverter(new DoubleConverter());
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, pheromonSlider, org.jdesktop.beansbinding.ELProperty.create("${toolTipText}"), pheromonText, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        localInformationText.setInputVerifier(new DoubleInputVerifier(0));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, localInformationSlider, org.jdesktop.beansbinding.ELProperty.create("${value}"), localInformationText, org.jdesktop.beansbinding.BeanProperty.create("text"), "localInformationBinding");
        binding.setConverter(new DoubleConverter());
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, localInformationSlider, org.jdesktop.beansbinding.ELProperty.create("${toolTipText}"), localInformationText, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        initialPheromonText.setInputVerifier(new DoubleInputVerifier(0));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, initialPheromonSlider, org.jdesktop.beansbinding.ELProperty.create("${value}"), initialPheromonText, org.jdesktop.beansbinding.BeanProperty.create("text"), "initialPheromonBinding");
        binding.setConverter(new DoubleConverter());
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, initialPheromonSlider, org.jdesktop.beansbinding.ELProperty.create("${toolTipText}"), initialPheromonText, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        pheromonUpdateText.setInputVerifier(new DoubleInputVerifier(0));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, pheromonUpdateSlider, org.jdesktop.beansbinding.ELProperty.create("${value}"), pheromonUpdateText, org.jdesktop.beansbinding.BeanProperty.create("text"), "pheromonUpdateBinding");
        binding.setConverter(new DoubleConverter());
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, pheromonUpdateSlider, org.jdesktop.beansbinding.ELProperty.create("${toolTipText}"), pheromonUpdateText, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        pheromonSlider.setMaximum(100000);
        pheromonSlider.setToolTipText("<html><b>Pheromongewichtung (&#945;):<br>\nIntervall:</b> 0 &le; &#945; &le; 10<br>\n<b>Funktion:</b> Die Pheromongewichtung bestimmt die Auswirkung<br>\nder Pheromone bei der Auswahl der als nächstes zu besuchenden Stadt<br>\nauf der Route einer Ameise. Ein hoher Wert für &#945; verstärkt die Sensitivität für Pheromone.<br>\n<b>Wertempfehlung:</b> 1.2\n\n");
        pheromonSlider.setValue(12000);

        localInformationSlider.setMaximum(100000);
        localInformationSlider.setToolTipText("<html><b>Distanzgewichtung (&#946;):<br>\nIntervall:</b> 0 &le; &#946; &le; 10<br>\n<b>Funktion:</b> Die Distanzgewichtung bestimmt den Grad der Bevorzugung<br>\nvon Städten mit einer geringeren Entfernung zum aktuellen Standort<br>\neiner Ameise gegenüber Städten mit einer größeren Entfernung.<br>\nEin hoher Wert für &#946; verstärkt die Sensitivität für geringen Distanzen bei der Stadtwahl.<br>\n<b>Wertempfehlung:</b> 10");
        localInformationSlider.setValue(100000);

        initialPheromonSlider.setMaximum(100000);
        initialPheromonSlider.setToolTipText("<html><b>Initiale Pheromonwerte (&#964;<sub>0</sub>):<br>\nIntervall:</b> 0 &lt; &#964;<sub>0</sub><br>\n<b>Funktion:</b> Zu Beginn jeder Iteration werden zufällige Pheromonwerte<br>\nauf den Strecken verteilt. Die zufälligen Werte liegen zwischen 0 und &#964;<sub>0</sub>.<br>\n<b>Wertempfehlung:</b> 10");
        initialPheromonSlider.setValue(500000);

        pheromonUpdateSlider.setMaximum(100000);
        pheromonUpdateSlider.setToolTipText("<html><b>Pheromonupdate (Q):<br>\nInterval:</b> 0 &lt; Q<br>\n<b>Funktion:</b> Nach jeder gelaufenen Route einer Ameise<br>\nverteilt diese Pheromone den Strecken dieser Route. Die Pheromone<br>\nwerden zu den vorhanden hinzuaddiert. Der addierte Wert wird bestimmt aus:<br>\n<b>Q * (Länge der global besten Route / Länge der Route der Ameise)</b><br>\nEine Route, die kürzer als die global beste Route ist,<br>\nerhält auf die Weise mehr Pheromone hinzuaddiert.<br>\n<b>Wertempfehlung:</b> 10");
        pheromonUpdateSlider.setValue(100000);

        javax.swing.GroupLayout parameterPanelLayout = new javax.swing.GroupLayout(parameterPanel);
        parameterPanel.setLayout(parameterPanelLayout);
        parameterPanelLayout.setHorizontalGroup(
            parameterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(parameterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(parameterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(initialPheromonSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                    .addComponent(pheromonUpdateSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pheromonSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, parameterPanelLayout.createSequentialGroup()
                        .addGroup(parameterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pheromonLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(localInformationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(evaporationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(parameterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(evaporationText)
                            .addComponent(pheromonText, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                            .addComponent(localInformationText)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, parameterPanelLayout.createSequentialGroup()
                        .addGroup(parameterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(initialPheromonLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pheromonUpdateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(parameterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pheromonUpdateText, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                            .addComponent(initialPheromonText)))
                    .addComponent(localInformationSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(evaporationSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        parameterPanelLayout.setVerticalGroup(
            parameterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(parameterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(parameterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pheromonLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pheromonText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pheromonSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(parameterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(localInformationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(localInformationText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(localInformationSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(parameterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(evaporationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(evaporationText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(evaporationSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(parameterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(initialPheromonLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(initialPheromonText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(initialPheromonSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addGroup(parameterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pheromonUpdateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pheromonUpdateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pheromonUpdateSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Parameter", parameterPanel);

        iterations.setBorder(javax.swing.BorderFactory.createTitledBorder("Iterationen:"));

        iterationCaptionLabel.setText("Anzahl der Iterationen:");
        iterationCaptionLabel.setToolTipText("<html>Die Anzahl der Iterationen legt fest, wird viele Berechnenungen<br>\nin einem Durchgang durchgeführt werden sollen.");

        antsCaptionLabel.setText("Anzahl der Ameisen:");
        antsCaptionLabel.setToolTipText("<html>Die Anzahl der Ameisen bestimmt, wie viele Ameisen<br>\npro Iteration das Feld durchlaufen. Eine Ameise startet<br>\nan einer zufällig gewählten Stadt und sucht anhand der Parameter<br>\nimmer eine nächste Stadt, bis alle Städte einmal besucht wurden<br>\nund die Anfangsstadt wieder erreicht wurde.");

        iterationsText.setText("10");
        iterationsText.setInputVerifier(new IntegerInputVerifier());

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, iterationCaptionLabel, org.jdesktop.beansbinding.ELProperty.create("${toolTipText}"), iterationsText, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        antsText.setText("100");
        antsText.setInputVerifier(new IntegerInputVerifier());

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, antsCaptionLabel, org.jdesktop.beansbinding.ELProperty.create("${toolTipText}"), antsText, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout iterationsLayout = new javax.swing.GroupLayout(iterations);
        iterations.setLayout(iterationsLayout);
        iterationsLayout.setHorizontalGroup(
            iterationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(iterationsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(iterationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(iterationCaptionLabel)
                    .addComponent(antsCaptionLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addGroup(iterationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(antsText)
                    .addComponent(iterationsText, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        iterationsLayout.setVerticalGroup(
            iterationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, iterationsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(iterationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(iterationCaptionLabel)
                    .addComponent(iterationsText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(iterationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(antsCaptionLabel)
                    .addComponent(antsText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        stopCondition.setBorder(javax.swing.BorderFactory.createTitledBorder("Abbruchbedingungen:"));
        stopCondition.setToolTipText("<html>Die zuerst eintretende Abbruchbedingungen<br>\nstoppt die Berechnung (ODER-Verknüpfung).<br>\nSollte keine Abbruchbedingungen eintreten,<br>\nwird läuft die Berechnung bis alle Iterationen abgearbeiten sind.");

        bestStopCheckBox.setText("<html>&nbsp;&nbsp;&nbsp;Route&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&le");
        bestStopCheckBox.setActionCommand("   Route       <");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, stopCondition, org.jdesktop.beansbinding.ELProperty.create("${toolTipText}"), bestStopCheckBox, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        averageStopCheckBox.setText("<html>&nbsp;&nbsp;&nbsp;&Oslash; Route&nbsp;&nbsp;&nbsp;&nbsp;&le");
        averageStopCheckBox.setActionCommand("<html>&nbsp;&nbsp;&nbsp;&Oslash; Route     ");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, stopCondition, org.jdesktop.beansbinding.ELProperty.create("${toolTipText}"), averageStopCheckBox, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        bestStopText.setText("5000 km");
        bestStopText.setInputVerifier(new IntegerInputVerifier(true));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, stopCondition, org.jdesktop.beansbinding.ELProperty.create("${toolTipText}"), bestStopText, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        bestStopText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bestStopTextActionPerformed(evt);
            }
        });

        averageStopText.setText("5000 km");
        averageStopText.setInputVerifier(new IntegerInputVerifier(true));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, stopCondition, org.jdesktop.beansbinding.ELProperty.create("${toolTipText}"), averageStopText, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        optStopCheckBox.setText("<html>&nbsp;&nbsp;&nbsp;optimale Lösung");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, stopCondition, org.jdesktop.beansbinding.ELProperty.create("${toolTipText}"), optStopCheckBox, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        optStopLabel.setText("5000 km");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, stopCondition, org.jdesktop.beansbinding.ELProperty.create("${toolTipText}"), optStopLabel, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout stopConditionLayout = new javax.swing.GroupLayout(stopCondition);
        stopCondition.setLayout(stopConditionLayout);
        stopConditionLayout.setHorizontalGroup(
            stopConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stopConditionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(stopConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(stopConditionLayout.createSequentialGroup()
                        .addComponent(bestStopCheckBox)
                        .addGap(33, 33, 33))
                    .addGroup(stopConditionLayout.createSequentialGroup()
                        .addGroup(stopConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(averageStopCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(optStopCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(stopConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(averageStopText)
                    .addComponent(bestStopText, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                    .addComponent(optStopLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        stopConditionLayout.setVerticalGroup(
            stopConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stopConditionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(stopConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bestStopCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bestStopText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(stopConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(averageStopCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(averageStopText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(stopConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(optStopCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(optStopLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout iterationPanelLayout = new javax.swing.GroupLayout(iterationPanel);
        iterationPanel.setLayout(iterationPanelLayout);
        iterationPanelLayout.setHorizontalGroup(
            iterationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(iterationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(iterationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(iterations, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stopCondition, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        iterationPanelLayout.setVerticalGroup(
            iterationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(iterationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(iterations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(stopCondition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(197, 197, 197))
        );

        jTabbedPane1.addTab("Ablauf", iterationPanel);

        jScrollPane1.setHorizontalScrollBar(null);

        instructionLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        instructionLabel.setText("<html>\n<b>1.  Einleitung:</b><br>\nDiese Software dient zur Berechnung der besten\nRoundroute über eine Auswahl von Städten.\n(Travelling Salesman Problem - TSP)\nJede Stadt soll dabei genau einmal besucht werden.\nDie Route soll so kurz wie möglich sein.\nDie Software unterstützt das tsp-Dateiformat.\nEs können Dateien geladen und speichert werden.<br><br>\n<b>2.  Bedienung:</b><br>\nIm folgenden werden die für die Bedienung\nrelevanten Funktionen beschrieben.<br><br>\n<b>2.1. Dateien laden:</b><br>\nÜber Menü \"Datei\" kann die Funktion \"Laden...\" aufgerufen werden.\nEs erscheint ein Dialog zum Auswählen einer tsp-Datei.\nDas weiße Anzeigefeld sollte nun die Städte der Datei darstellen\nSollte sich im selben Verzeichnis eine zugehörige opt.tour-Datei\nbefinden, wird nun die optimale Route in grün gezeichnet.<br><br>\n<b>2.2. TSP modifizieren:</b><br>\nDurch Linksklick auf das weiße Anzeigefeld kann eine Stadt\nan der Zeigerposition hinzugefügt werden.\nDurch Rechtklick auf eine Stadt kann die markiert werden (rote Farbe).\nEine markierte Stadt kann durch gehaltenen Rechtklick mit der Maus bewegt werden.<br><br>\n<b>2.3. TSP selbst erstellen:</b><br>\nÜber das Menü \"Datei\" kann die Funktion \"Neu\" aufgerufen werden.\nDas weiße Anzeigefeld wird komplett gelöscht. Nun kann man analog\nzu <b>2.2.</b> eigene Städte auf das Feld setzen.<br><br>\n<b>2.4. TSP speichern:</b><br>\nÜber das Menü \"Datei\" kann die Funktion \"Speichern\" aufgerufen werden.\nAnschließend kann ein Speicherort gewählt werden.\nDas aktuell angezeigt TSP wird dann dort als tsp-Datei gespeichert.<br><br>\n<b>2.5. Parameter einstellen:</b><br>\nIm Tab \"Parameter\" können die Parameter für die Berechnung\nmit den Schiebereglern eingestellt werden. Die Tooltips\nerklären jeden Paramameter und geben eine Wertempfehlung an.<br><br>\n<b>2.6. Ablauf festelegen:</b><br>\nIm Tab \"Ablauf\" kann der Ablauf der Berechnung gesteuert werden.\nDie Tooltips erklären die Funktion der einzelnen Elemente.<br><br>\n<b>2.7. Berechnung starten:</b><br>\nÜber den Button \"Start\" kann die Berechnung gestartet werden.\nDer Fortschrittsbalken und das Ergebnis-Panel zeigen\nwichtige Informationen an.");
        instructionLabel.setName("instructionLabel"); // NOI18N
        instructionLabel.setPreferredSize(new java.awt.Dimension(270, 1000));
        jScrollPane1.setViewportView(instructionLabel);

        javax.swing.GroupLayout instructionPanelLayout = new javax.swing.GroupLayout(instructionPanel);
        instructionPanel.setLayout(instructionPanelLayout);
        instructionPanelLayout.setHorizontalGroup(
            instructionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
        );
        instructionPanelLayout.setVerticalGroup(
            instructionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(instructionPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 441, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        jTabbedPane1.addTab("Anleitung", instructionPanel);

        resultPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Ergebnisse:"));
        resultPanel.setPreferredSize(new java.awt.Dimension(566, 180));

        commentCaptionLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        commentCaptionLabel.setText("Kommentar:");
        commentCaptionLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        commentCaptionLabel.setMaximumSize(null);
        commentCaptionLabel.setMinimumSize(null);
        commentCaptionLabel.setPreferredSize(new java.awt.Dimension(150, 14));
        commentCaptionLabel.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        cityCountCaptionLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cityCountCaptionLabel.setText("Anzahl der Städte:");
        cityCountCaptionLabel.setMaximumSize(null);
        cityCountCaptionLabel.setMinimumSize(null);
        cityCountCaptionLabel.setPreferredSize(new java.awt.Dimension(150, 14));

        timeCaptionLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        timeCaptionLabel.setText("benötigte Zeit:");
        timeCaptionLabel.setMaximumSize(null);
        timeCaptionLabel.setMinimumSize(null);

        nameCaptionLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        nameCaptionLabel.setText("Name:");
        nameCaptionLabel.setToolTipText("");
        nameCaptionLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        nameCaptionLabel.setMaximumSize(new java.awt.Dimension(150, 14));
        nameCaptionLabel.setMinimumSize(new java.awt.Dimension(150, 14));
        nameCaptionLabel.setPreferredSize(new java.awt.Dimension(150, 14));

        commentScrollBar.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        commentScrollBar.setOpaque(false);

        commentTextArea.setEditable(false);
        commentTextArea.setBackground(javax.swing.UIManager.getDefaults().getColor("Label.background"));
        commentTextArea.setColumns(20);
        commentTextArea.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        commentTextArea.setLineWrap(true);
        commentTextArea.setWrapStyleWord(true);
        commentTextArea.setAutoscrolls(false);
        commentTextArea.setBorder(null);
        commentTextArea.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        commentTextArea.setFocusable(false);
        commentTextArea.setMargin(new java.awt.Insets(0, 0, 0, 0));
        commentTextArea.setMaximumSize(new java.awt.Dimension(2147483647, 28));
        commentTextArea.setMinimumSize(new java.awt.Dimension(50, 28));
        commentScrollBar.setViewportView(commentTextArea);

        nameLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        javax.swing.GroupLayout infoPanelLayout = new javax.swing.GroupLayout(infoPanel);
        infoPanel.setLayout(infoPanelLayout);
        infoPanelLayout.setHorizontalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addComponent(timeCaptionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(timeLabel)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addComponent(cityCountCaptionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(cityCountLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, infoPanelLayout.createSequentialGroup()
                        .addComponent(nameCaptionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(nameLabel)))
                .addContainerGap())
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addComponent(commentCaptionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(commentScrollBar))
        );
        infoPanelLayout.setVerticalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameCaptionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cityCountLabel)
                    .addComponent(cityCountCaptionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(commentCaptionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(commentScrollBar, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeCaptionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timeLabel))
                .addGap(42, 42, 42))
        );

        scorePanel.setPreferredSize(new java.awt.Dimension(2484, 30));

        scoreTablePanel.setLayout(new java.awt.GridLayout(0, 2, 0, 2));

        bestRouteCaptionLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        bestRouteCaptionLabel.setText("Beste Route:");
        scoreTablePanel.add(bestRouteCaptionLabel);

        averageRouteCaptionLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        averageRouteCaptionLabel.setText("Durchschnittliche Route:");
        scoreTablePanel.add(averageRouteCaptionLabel);

        globalBestLabel.setText("-");
        scoreTablePanel.add(globalBestLabel);

        globalAverageLabel.setText("-");
        scoreTablePanel.add(globalAverageLabel);

        localBestLabel.setText("-");
        scoreTablePanel.add(localBestLabel);

        localAverageLabel.setText("-");
        scoreTablePanel.add(localAverageLabel);

        globalCaptionLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        globalCaptionLabel.setText("Gesamt (rot):");

        localCaptionLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        localCaptionLabel.setText("Iteration (blau):");

        javax.swing.GroupLayout scoreHeaderTablePanelLayout = new javax.swing.GroupLayout(scoreHeaderTablePanel);
        scoreHeaderTablePanel.setLayout(scoreHeaderTablePanelLayout);
        scoreHeaderTablePanelLayout.setHorizontalGroup(
            scoreHeaderTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scoreHeaderTablePanelLayout.createSequentialGroup()
                .addGroup(scoreHeaderTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(globalCaptionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(localCaptionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        scoreHeaderTablePanelLayout.setVerticalGroup(
            scoreHeaderTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scoreHeaderTablePanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(globalCaptionLabel)
                .addGap(2, 2, 2)
                .addComponent(localCaptionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout scorePanelLayout = new javax.swing.GroupLayout(scorePanel);
        scorePanel.setLayout(scorePanelLayout);
        scorePanelLayout.setHorizontalGroup(
            scorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, scorePanelLayout.createSequentialGroup()
                .addComponent(scoreHeaderTablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(scoreTablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE))
        );
        scorePanelLayout.setVerticalGroup(
            scorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scorePanelLayout.createSequentialGroup()
                .addGroup(scorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scoreHeaderTablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scoreTablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout resultPanelLayout = new javax.swing.GroupLayout(resultPanel);
        resultPanel.setLayout(resultPanelLayout);
        resultPanelLayout.setHorizontalGroup(
            resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resultPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(infoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scorePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE))
                .addContainerGap())
        );
        resultPanelLayout.setVerticalGroup(
            resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resultPanelLayout.createSequentialGroup()
                .addComponent(infoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scorePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        fileMenu.setText("Datei");

        newMenuItem.setText("Neu");
        newMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newMenuItem);

        saveMenuItem.setText("Speichern");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        loadMenuItem.setText("Laden...");
        loadMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(loadMenuItem);

        exitMenuItem.setText("Beenden");
        fileMenu.add(exitMenuItem);

        mainMenuBar.add(fileMenu);

        showMenu.setText("Ansicht");

        showPheromonLevelMenuItem.setText("Pheromonlevel Anzeigen");
        showPheromonLevelMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPheromonLevelMenuItemActionPerformed(evt);
            }
        });
        showMenu.add(showPheromonLevelMenuItem);
        showMenu.add(jSeparator1);

        transparenceLevelCaptionMenuItem.setText("Transparenz der Linien");
        transparenceLevelCaptionMenuItem.setEnabled(false);
        transparenceLevelCaptionMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transparencyLevelChanged(evt);
            }
        });
        showMenu.add(transparenceLevelCaptionMenuItem);

        transparencyGroup.add(transparence80MenuItem);
        transparence80MenuItem.setSelected(true);
        transparence80MenuItem.setText("    80 %");
        transparence80MenuItem.setActionCommand("80");
        transparence80MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transparencyLevelChanged(evt);
            }
        });
        showMenu.add(transparence80MenuItem);

        transparencyGroup.add(transparence60MenuItem);
        transparence60MenuItem.setText("    60 %");
        transparence60MenuItem.setActionCommand("60");
        transparence60MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transparencyLevelChanged(evt);
            }
        });
        showMenu.add(transparence60MenuItem);

        transparencyGroup.add(transparence40MenuItem);
        transparence40MenuItem.setText("    40 %");
        transparence40MenuItem.setActionCommand("40");
        transparence40MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transparencyLevelChanged(evt);
            }
        });
        showMenu.add(transparence40MenuItem);

        transparencyGroup.add(transparence20MenuItem);
        transparence20MenuItem.setText("    20 %");
        transparence20MenuItem.setActionCommand("20");
        transparence20MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transparencyLevelChanged(evt);
            }
        });
        showMenu.add(transparence20MenuItem);

        transparencyGroup.add(transparence00MenuItem);
        transparence00MenuItem.setText("      0 %");
        transparence00MenuItem.setActionCommand("0");
        transparence00MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transparencyLevelChanged(evt);
            }
        });
        showMenu.add(transparence00MenuItem);

        mainMenuBar.add(showMenu);

        setJMenuBar(mainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resultPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(progressPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(paintPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(paintPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(viewPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(resultPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE))
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(progressPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadMenuItemActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("TSP Laden");
        chooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
        chooser.setFileFilter(new FileNameExtensionFilter("TSP-Datei", "tsp"));
        chooser.showOpenDialog(this);
        if (chooser.getSelectedFile() != null) {
            TSP.loadFromFile(chooser.getSelectedFile().getPath());
            refreshTSPInfos();
            if (Main.data.getOptimalRoute() == null) {
                this.optStopCheckBox.setEnabled(false);
                this.optStopLabel.setEnabled(false);
                this.optStopLabel.setText("");
            } else {
                this.optStopCheckBox.setEnabled(true);
                this.optStopLabel.setEnabled(true);
                this.optStopLabel.setText(formatter.format(Main.data.getOptimalRoute().getLength()) + " km");
            }
            
        }
    }//GEN-LAST:event_loadMenuItemActionPerformed

    
    private void paintPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paintPanelMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON1) { // LEFT CLICK
            Main.data.addCity(paintPanel.XPixel2Coord(evt.getX()), paintPanel.YPixel2Coord(evt.getY()));
            paintPanel.refresh();
        }
        //TODO rechtsklick ins leere --> nullpointerexception
        if (evt.getButton() == MouseEvent.BUTTON3) { // RIGHT CLICK
            City nearestCity = Main.data.getCityNearby(paintPanel.XPixel2Coord(evt.getX()), paintPanel.YPixel2Coord(evt.getY()),paintPanel.getThickness() / paintPanel.getRelation(),paintPanel.getThickness() / paintPanel.getRelation());
            if (nearestCity != null) {
                if (selectedCity != null) {
                    selectedCity.setColor(Color.BLACK);

                }
                if (selectedCity == nearestCity) {
                    selectedCity = null;
                    paintPanel.refresh();
                } else {
                    nearestCity.setColor(Color.red);
                    selectedCity = nearestCity;
                    paintPanel.refresh();
                }

            } else {
                selectedCity.setColor(Color.BLACK);
                selectedCity = null;
                paintPanel.refresh();
            }
        }
       
            
        refreshTSPInfos();
    }//GEN-LAST:event_paintPanelMouseClicked

    private void newMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuItemActionPerformed

        autoscaleSwitch.setSelected(false);
        paintPanel.setAutoscale(false);
        zoomSlider.setValue(100);
        paintPanel.resetOffset();
        Main.data = new TSP();
        paintPanel.refresh();
        refreshTSPInfos();
    }//GEN-LAST:event_newMenuItemActionPerformed

    private void paintPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paintPanelMousePressed
        if (evt.getButton() == MouseEvent.BUTTON3) {
            if (selectedCity != null) {
                City nearestCity = Main.data.getCityNearby(paintPanel.XPixel2Coord(evt.getX()), paintPanel.YPixel2Coord(evt.getY()), 10 / paintPanel.getRelation(), 10 / paintPanel.getRelation());
                if (nearestCity == selectedCity) {
                    moveCity = true;
                }
            }
        }
        if (evt.getButton() == MouseEvent.BUTTON1) {
            if (!autoscaleSwitch.isSelected()) {
                mousePressed = true;
                pressedX = evt.getX();
                pressedY = evt.getY();
            }
        }
        
        
    }//GEN-LAST:event_paintPanelMousePressed

    private void paintPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paintPanelMouseReleased
        if (moveCity) {
            Main.data.reCalculateDistanceData();
        }        
        mousePressed = false;
        moveCity = false;
        paintPanel.setCursor( new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_paintPanelMouseReleased

    private void paintPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paintPanelMouseDragged
        if (moveCity) {
            Main.data.moveCity(paintPanel.XPixel2Coord(evt.getX()),paintPanel.YPixel2Coord(evt.getY()), selectedCity);
            paintPanel.refresh();
        }
        
        if (mousePressed) {
            paintPanel.setCursor( new Cursor(Cursor.MOVE_CURSOR));
            paintPanel.shiftX(pressedX - evt.getX());
            paintPanel.shiftY(pressedY - evt.getY());
            pressedX = evt.getX();
            pressedY = evt.getY();
            paintPanel.refresh();
        }
    }//GEN-LAST:event_paintPanelMouseDragged

    private void ThicknessChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ThicknessChanged
        paintPanel.setThickness(thicknessSlider.getValue());
        paintPanel.refresh();
    }//GEN-LAST:event_ThicknessChanged

    private void zoomChangedHandler(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_zoomChangedHandler
        paintPanel.setZoom(zoomSlider.getValue());
        paintPanel.refresh();
    }//GEN-LAST:event_zoomChangedHandler

    private void autoscaleChanged(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoscaleChanged
        paintPanel.setAutoscale(autoscaleSwitch.isSelected());
        if (!autoscaleSwitch.isSelected()) {
            paintPanel.setBestOffset();
        }
        paintPanel.refresh();
    }//GEN-LAST:event_autoscaleChanged

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        if (solver == null) {
            
            
            try {
                
                
                if (this.averageStopCheckBox.isSelected()) {
                    Main.data.setAverageStopAktiv(true);
                    Main.data.setAverageStop(Double.parseDouble(this.averageStopText.getText().replace("km", "").trim()));
                } else {
                    Main.data.setAverageStopAktiv(false);
                }
                if (this.bestStopCheckBox.isSelected()) {
                    Main.data.setBestStopAktiv(true);
                    Main.data.setBestStop(Double.parseDouble(this.bestStopText.getText().replace("km", "").trim()));
                } else {
                    Main.data.setBestStopAktiv(false);
                }
                
                if (this.optStopCheckBox.isSelected()) {
                    Main.data.setOptStopAktiv(true);
                } else {
                    Main.data.setOptStopAktiv(false);
                }
                
                Main.data.setPheromon(Double.parseDouble(pheromonText.getText()));
                Main.data.setLocalInformation(Double.parseDouble(localInformationText.getText()));
                Main.data.setEvaporation(Double.parseDouble(evaporationText.getText()));
                Main.data.setInitialPheromon(Double.parseDouble(initialPheromonText.getText()));
                Main.data.setPheromonUpdate(Double.parseDouble(pheromonUpdateText.getText()));
                Main.data.setIterations(Integer.parseInt(iterationsText.getText()));
                Main.data.setAnts(Integer.parseInt(antsText.getText()));
                solver = new Thread(Main.data);
                solver.start();
                this.startButton.setText("Stop");
                this.setCursor( new Cursor(Cursor.WAIT_CURSOR));
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Fehlerhafter Parameter:\n" + e.getMessage(), "Fehlerhafter Parameter", JOptionPane.ERROR_MESSAGE);
                solver = null;
                this.startButton.setText("Start");
                this.setCursor( new Cursor(Cursor.DEFAULT_CURSOR));
            }
            
            
        } else {
            Main.data.stopRunning();
        }
    }//GEN-LAST:event_startButtonActionPerformed

    public void solverFinished() {
        this.setCursor( new Cursor(Cursor.DEFAULT_CURSOR));
        this.startButton.setText("Start");
        this.progressBar.setString("Fertig!");
        solver = null;
    }
    
    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("TSP-Speichern");
        chooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
        if (Main.data.getName() != null) {
            chooser.setSelectedFile(new File(System.getProperty("user.dir") + "/" + Main.data.getName() + ".tsp"));
        } else {
            chooser.setSelectedFile(new File(System.getProperty("user.dir") + "/Neu.tsp"));    
        }     
        chooser.setFileFilter(new FileNameExtensionFilter("TSP-Datei", "tsp"));
        
        if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION && chooser.getSelectedFile() != null) {
            Main.data.saveToFile(chooser.getSelectedFile());
            refreshTSPInfos();
        }
        
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void zoomLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_zoomLabelMouseClicked
        zoomSlider.setValue(100);
    }//GEN-LAST:event_zoomLabelMouseClicked

    private void transparencyLevelChanged(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transparencyLevelChanged
        try {
            int percent = Integer.parseInt(evt.getActionCommand());
            int transparency =  (int) ((100 - percent) * ((double) 255) / 100);
            this.paintPanel.setTransparency(transparency);
            this.paintPanel.refresh();
        } catch (Exception e) {
            
        }
    }//GEN-LAST:event_transparencyLevelChanged

    private void showPheromonLevelMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPheromonLevelMenuItemActionPerformed
        this.paintPanel.setShowPheromonLevel(this.showPheromonLevelMenuItem.isSelected());
        Main.data.setShowPheromonLevel(this.showPheromonLevelMenuItem.isSelected());
        this.paintPanel.refresh();
    }//GEN-LAST:event_showPheromonLevelMenuItemActionPerformed

    private void bestStopTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bestStopTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bestStopTextActionPerformed

    public void refreshTSPInfos() {
        this.nameLabel.setText(Main.data.getName());
        this.commentTextArea.setText(Main.data.getComment());
        this.cityCountLabel.setText(Main.data.getCityListLength() + " Städte");
        if (Main.data.getGlobalBest() != null) {
            this.globalBestLabel.setText(formatter.format(Main.data.getGlobalBest().getLength()) + " km");
        }
        if (Main.data.getLocalBest() != null) {
            this.localBestLabel.setText(formatter.format(Main.data.getLocalBest().getLength()) + " km");
        }
        this.globalAverageLabel.setText(formatter.format(Main.data.getAverageGlobalRoute()) + " km");
        this.localAverageLabel.setText(formatter.format(Main.data.getAverageLocalRoute()) + " km");
        this.timeLabel.setText(formatter.format(Main.data.getDuration() / ((double) 1000)) + " s");
        this.progressBar.setValue(Main.data.getProgress());
        this.progressBar.setString(Main.data.getProgress() + " % (" + Main.data.getAntCount() + " Ameisen)");
        this.resultPanel.repaint();
        this.progressBar.repaint();
        //this.progressBar.update(progressBar.getGraphics());
    }
    
    public int getZoom() {
        return zoomSlider.getValue();
    }
    
    public void refreshPaintPanel() {
        this.paintPanel.refresh();
        this.refreshTSPInfos();
    }
    
    public boolean getAutoscale() {
        return autoscaleSwitch.isSelected();
    }
    
    public void startPainterThread() {
        this.paintPanel.startPainterThread();
    }
    
    public void refreshPainterThread() {
        this.paintPanel.refreshPainterThread();
    }
    
    public void stopPainterThread() {
        this.paintPanel.stopPainterThread();
    }
    /** 
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            @Override
//            public void run() {
//                new MainWindow().setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel antsCaptionLabel;
    private javax.swing.JTextField antsText;
    private javax.swing.JToggleButton autoscaleSwitch;
    private javax.swing.JLabel averageRouteCaptionLabel;
    private javax.swing.JCheckBox averageStopCheckBox;
    private javax.swing.JTextField averageStopText;
    private javax.swing.JLabel bestRouteCaptionLabel;
    private javax.swing.JCheckBox bestStopCheckBox;
    private javax.swing.JTextField bestStopText;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JLabel cityCountCaptionLabel;
    private javax.swing.JLabel cityCountLabel;
    private javax.swing.JLabel commentCaptionLabel;
    private javax.swing.JScrollPane commentScrollBar;
    private javax.swing.JTextArea commentTextArea;
    private javax.swing.JLabel evaporationLabel;
    private javax.swing.JSlider evaporationSlider;
    private javax.swing.JTextField evaporationText;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel globalAverageLabel;
    private javax.swing.JLabel globalBestLabel;
    private javax.swing.JLabel globalCaptionLabel;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JLabel initialPheromonLabel;
    private javax.swing.JSlider initialPheromonSlider;
    private javax.swing.JTextField initialPheromonText;
    private javax.swing.JLabel instructionLabel;
    private javax.swing.JPanel instructionPanel;
    private javax.swing.JLabel iterationCaptionLabel;
    private javax.swing.JPanel iterationPanel;
    private javax.swing.JPanel iterations;
    private javax.swing.JTextField iterationsText;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JMenuItem loadMenuItem;
    private javax.swing.JLabel localAverageLabel;
    private javax.swing.JLabel localBestLabel;
    private javax.swing.JLabel localCaptionLabel;
    private javax.swing.JLabel localInformationLabel;
    private javax.swing.JSlider localInformationSlider;
    private javax.swing.JTextField localInformationText;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JLabel nameCaptionLabel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JMenuItem newMenuItem;
    private javax.swing.JCheckBox optStopCheckBox;
    private javax.swing.JLabel optStopLabel;
    private ants.PaintPanel paintPanel;
    private javax.swing.JPanel parameterPanel;
    private javax.swing.JLabel pheromonLabel;
    private javax.swing.JSlider pheromonSlider;
    private javax.swing.JTextField pheromonText;
    private javax.swing.JLabel pheromonUpdateLabel;
    private javax.swing.JSlider pheromonUpdateSlider;
    private javax.swing.JTextField pheromonUpdateText;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JPanel progressPanel;
    private javax.swing.JPanel resultPanel;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JPanel scoreHeaderTablePanel;
    private javax.swing.JPanel scorePanel;
    private javax.swing.JPanel scoreTablePanel;
    private javax.swing.JMenu showMenu;
    private javax.swing.JCheckBoxMenuItem showPheromonLevelMenuItem;
    private javax.swing.JButton startButton;
    private javax.swing.JPanel stopCondition;
    private javax.swing.JLabel thicknessLabel;
    private javax.swing.JSlider thicknessSlider;
    private javax.swing.JLabel timeCaptionLabel;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JRadioButtonMenuItem transparence00MenuItem;
    private javax.swing.JRadioButtonMenuItem transparence20MenuItem;
    private javax.swing.JRadioButtonMenuItem transparence40MenuItem;
    private javax.swing.JRadioButtonMenuItem transparence60MenuItem;
    private javax.swing.JRadioButtonMenuItem transparence80MenuItem;
    private javax.swing.JMenuItem transparenceLevelCaptionMenuItem;
    private javax.swing.ButtonGroup transparencyGroup;
    private javax.swing.JPanel viewPanel;
    private javax.swing.JLabel zoomLabel;
    private javax.swing.JLabel zoomLabel2;
    private javax.swing.JSlider zoomSlider;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
