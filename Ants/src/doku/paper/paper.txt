Abstrakt

Auch im Jahr 2012 gibt es immer noch mathematische Probleme, die selbst durch die leistungsfähigsten Computer nicht in kurzer Zeit zu optimal lösen sind. Zu ihnen zählt das Travelling Salesman Problem.
Die Studenten des Studiengangs Informatik Jahrgang 2011 erhielten die Projektaufggabe eine Programm zu entwickeln, das mit dem Ameisenalgorithmus versucht, für das Travelling Salesman Problem in kurzer Zeit gute Lösungen zu finden. Der Ameisenalgorithmus ist ein heuristisches Verfahren, das versucht mit begrenztem Wissen in akzeptabler Zeit guten Lösungen für spezielle Optimierungsprobleme zu finden. Im Vordergrund des Projektes stand die agile Softwareentwicklung.

1. Einführung:

Im Rahmen des Moduls "Fachübergreifendes Labor" an der Hochschule für Wirtschaft und Recht im Studiengang Informatik soll ein Softwareprojekt von den Studierenden in Gruppenarbeit durchgeführt werden. Die Aufgabe des Kursprojektes war die Programmierung einer Software zur Lösung des "Travelling Salesman Problems" mittels eines metaheuristischen Verfahren - dem sogenannten Ameisenalgorithmus. Das Augenmerk sollte hierbei nicht nur auf der Implementierung selbst liegen, sondern vielmehr auf der Art und Weise der Umsetzung, also dem Projektmanagement und den zur Implementierung verwendeten Arbeitstechniken. Im Untermodul "Projektmanagement und Qualitätssicherung" wurden zahlreiche Konzepte zur Agilen Softwareentwicklung vorgestellt. Die Aufgabestellung gab vor, dass die Erstellung der Software unter Anwendung agiler Techniken erfolgen soll. Hierbei soll vor Allem die Methode des Extreme Programming verwendet werden. Das folgende Dokument dient zur Dokumentation der Erfahrungen während des Projekts und zur Darstellung der Ergebnisse.

1.1 Theorie zum Travelling Salesman Problem:

Das Travelling Salesman Problem (zu Deutsch: "Problem des Handelsreisenden" / abgekürzt durch "TSP") ist ein kombinatorisches Optimierungproblem. Das Problem besteht in der Findung der kürzesten Rundreiseroute unter einer vorgegebenen Anzahl von Orten (bzw. Städten) mit untereinander verschiedenen Distanzen. Eine gültige Route startet an einem der Orte, im Folgenden wird jeder weitere Ort genau einmal besucht und als Endpunkt muss wieder der Startort aufgesucht werden. Dieses Szenario lässt sich vielfach bei praktischen Anwendungen anfinden. Zwei Beispiele hierzu wären die Tourenplanung und das Design von Mikrochips.
Für das Projekt waren ausschließlich symmetrische TSPs von Relevanz. Hier sind die Hin- und Rückstrecke zwischen zwei Orten jeweils identisch.
Als Referenzproblem dient das berlin52-TSP. Es besteht aus 52 Orten innerhalb Berlins. Die optimale Routenlänge für das Problem ist bekannt und lautet 7542. Die Koordinaten der Orte sind im zweidimensionalen (x und y) euklidischen Format angegeben. Die Berechnung der Distanz L zwischen den Orten i und j erfolgt mit der Gleichung: L = sqrt(dx*dx + dy*dy) wobei dx = x(i)-x(j) und dy = y(i)-y(j).
Das Travelling Salesman Problem ist NP-äquivalent, das heißt im Falle von P ungleich NP ist ein TSP nicht in polynomialer Zeit lösbar. Eine exakte Lösung für ein TSP zu finden ist daher sehr schwer bis hin zu unmöglich aufgrund der enormen erforderlichen Rechenleistung. Die Anzahl an möglichen Lösungen für ein symmetrischen TSP mit N Städten beträgt (N-1)!/2. Für das Referenzproblem berlin52 existieren demnach schon über 7,7*10^65 verschiedene Lösungen.

1.2 Ameisenalgorithmus:

Um den Aufwand bei der exakten Findung der kürzesten eines TSPs zu verkürzen, werden sogenannte heuristische Verfahren angewendet. Heuristik ist die Kunst, mit begrenztem Wissen und in geringer Zeit, gute Lösungen für ein Problem zu finden. Für das Projekt gibt die Aufgabenstellung den metaheuristischen Ameisenalgorithmus vor. Eine Metaheuristik ist eine abstrakte und für verschiedene Optimierungsprobleme anwendbare Anleitung zur Lösungsfindung. Der Ameisenalgorithmus lässt sich auf für das Travelling Salesman Problem anwenden. Er basiert auf dem Verhalten von Ameisen bei der Futtersuche. Dabei wird davon ausgegangen, dass die Ameisen auf einer Strecke, die sie zurücklegen, Pheromone (spezielle Botenstoffe zu Kommunikation) absondern. In einem Szenario zur Verdeutlichung des Algorithmus existieren zum einen der Ameisenbau und eine Futterquelle als zwei Orte. Wenn zwei Ameisen zwischen Ameisenbau und Futterquelle auf zwei unterschiedlich langen Strecken pendeln, wird die Ameise auf dem kürzeren Weg zuerst wieder am Ameisenbau eintreffen. Eine dritte Ameise würde anhand der verteilten Pheromonspur den kürzesten Weg bevorzugen, weil auf ihm eine frische Pheromonspur liegt, ohne dass diese dritte Ameise weiß, dass der Weg der kürzere ist.
Dieses Verhalten kann man auf das Travelling Salesman Problem übertragen und zu Lösung einsetzen. Verschiedene Parameter sind für den Algorithmus relevant. Eine Ameise wird auf einen zufällig gewählten Ort platziert. Anschließend soll die Ameise nacheinander eine neue Stadt wählen und besuchen, bis jede Stadt einmal besucht wurde und sie wieder auf der dem Startort steht. Bei der Auswahl der neuen Stadt wird eine Formel angewendet, die einerseits die Distanz zu den verfügbaren Ort betrachtet (Parameter beta) und zum anderen den Pheromongehalt aller Strecken mit einbezieht (Parameter alpha). FORMEL EINFÜGEN
Es werden noch weitere Gegebenheiten der Realität nachempfunden. Eine Ameise kann nicht unendlich viel Pheomon mit sich führen. Anhand ein Formel wird das Pheromon auf der Route gleichmäßig und abhängig von der Routenlänge verteilt. Eine kürzere, also bessere, gefundene Route profitiert durch einen höheren Pheromongehalt (Parameter Q). FORMEL EINFÜGEN
Die Pheromone verdunsten mit der Zeit von der Streckenoberfläche. Hier wird mit einer Formel das Pheromon auf jeder Strecke um einen prozentualen Anteil verringert (Parameter rho). FORMEL EINFÜGEN
Man kann außerdem davon ausgehen, dass auf den Streckenpfaden eventuell schon Pheromone vorhanden sind. Auf dieser Grundlage kann zu Beginn jeder Berechnung zufällig auf allen Strecken Pheromon verteilt werden (Parameter tau0). FORMEL EINFÜGEN


2. Extreme Programming:

2.1 Iteratives Vorgehen:

Bei Extreme Programming (kurz XP) handelt es sich um eine Methode der Softwareentwicklung, die das Lösen von Programmieraufgaben in den Vordergrund stellt. Sie verzichtet dabei auf viele aufwändige Schritte konventioneller Softwareentwicklungstechnik und ersetzt diese durch agilere Techniken. So entfällt relativ wenig Bedeutung auf das Projektmanagement an sich. XP ist ein iteratives Verfahren. Das heißt der Entwicklungsvorgang findet in immer wiederkehrenden und nach dem gleichen Muster erfolgenden Einzelschritten (Iterationen) statt.
Im Mittelpunkt der Programmiertätigkeit stehen beim Extreme Programming sogenannte User Stories. Sie werden im Rahmen des sogenannten Planning Games zu Beginn jeder Iteration erstellt. Eine User Story entspricht der individuellen Anforderung eines Stakeholders. Diese Anforderungen sollten möglich atomar formuliert werden. Eine User Story wird im Stil einer kleinen Geschichte verfasst, in der alle wichtigen Informationen enthalten sind.
Im Allgemeinen gilt das Schema: "Als [Rolle] möchte ich [Aktion], damit ich [Ziel]". BILD EINFÜGEN
Die User Stories werden meist auf Story Cards geschrieben. Eine Story Card entspricht dabei häufig einer Karteikarte (A5- oder A6-Format), um die Länge einer User Story zu begrenzen und einen einfachen Umgang mit den Karten zu gewährleisten. Zusätzlich werden spezielle für das Projekt relevanten Kennzahlen auf den Karten notiert. Hierzu zählen Risiko, Wert und Aufwand, die von den Entwicklern geschätzt werden. Außerdem können sogenannte Akzeptanzkriterien von den Entwicklern formuliert (meist auf der Rückseite der Story Card) werden, die bei der Implementierung erfüllt werden müssen, um die im späteren Verlauf folgenden Akzeptanztests zu erfüllen. Beim Akzeptanztest wird das Verhalten des Programmes überprüft.
Nach dem die Story Cards einer Iteration zusammengestellt wurden, wird eine Reihenfolge für die Abarbeitung anhand einer Entscheidungsmatrix festgelegt. BILD ENTSCHEIDUNGSMATRIX
Anschließend werden die User Stories nach der festgelegten Reihenfolge implementiert und getestet.
Mit jeder Iteration können neue Anforderungen der Stakeholder mit in das Programm einfließen. Zudem ist ein stetiges Feedback des Kunden gegeben.

2.2 Erfahrungssammlung im Kursprojekt

Die Aufgabenstellung schrieb den Studenten vor, das Projekt nach der Extreme Programming Methode umzusetzen. Hierbei sollten möglichst viele Techniken und Prinzipien von XP eingesetzt werden. Aufgrund der Gruppenstärke von zwei Personen war vor allem die Technik des Pair Programming (kurz PP) von Bedeutung. Sie sieht vor, dass Programmierung in Teams von zwei Personen erfolgt. Eine Personen ist der sogenannte "Fahrer" und bedient schreibt den Programmcode. Die zweite Person spielt den "Navigator". Sie kontrolliert das Handeln des Fahrers und behält des Überblick über das "Ganze". Zu zweit ist man in der Lage auch schwierigere Passagen in der Implementierung relativ schnell und vor allem mit einer geringen Fehlerquote zu bewältigen. Mit dem PP konnten durch die Entwickler sehr positive Erfahrungen gesammelt werden. Das gemeinsame Arbeiten sorgt für ein Gefühl der Sicherheit, weil die Verantwortung nicht mehr alleine getragen werden muss. Schreibfehler werden in den meisten Fällen noch während des Schreibens entdeckt und korrigiert. Man "verläuft" sich nicht so schnell beim Lösungansatz und trifft auf eine Sackgasse.
XP empfiehlt Programmierstandards für den Programmcode festzulegen. Diese wurde zu Beginn des Projektes erstellt. Durch striktes einhalten der Vorschrift ist ein leicht verständlicher Programmcode entstanden, der nur konsistente und logisch sinnvolle Bezeichnung der Codeelemente enthält.
XP schreibt das sogenannte Collective Codeownership vor, das eine gemeinsame Verantwortung aller Entwickler für jede Codezeile definiert. Ein Programmierer besitzt keinen eigenen Code und darf auch von anderen Entwicklern formulierten Code mitverändern. Dieses Prinzip ließ sich leicht und selbstverständlich umsetzen, da ein Großteil des Codes ohnehin durch Pair Programming entstanden ist.
Da dieses Projekt vor allem der Sammlung von Erfahrung mit agiler Softwareentwicklung dient und die Entwickler vorher noch keine derartigen Erfahrungen gesammelt hatten, fiel es teilweise schwierig sich an die gegebenen Richtlinien zu halten.

3. Projektmanagement

3.1 Organisation:

Da Extreme Programming mehr ein Werk von Richtlinien für eine gute Softwareentwicklung ist, als eine genaue Gebrauchsanweisung, war die Gestaltung des Vorgehens den Entwicklern großteilig selbst überlassen worden. Einen festen Rahmen bildeten allerdings die zwei Iterationen nach Aufgabenstellung der Dozentin. Zur Kontrolle dienten ein Zwischenbericht nach der ersten und ein Endvortrag nach der zweiten Iteration. Zusätzlich wurde Anforderungen der Dozentin, die gleichzeitig Kundin war, gestellt. Ziel der ersten Iteration waren die Programmoberfläche und die Dateiverwaltung des speziellen tsp-Dateiformats. Die zweite Iteration erweiterte die Anforderungen um eine Hilfefunktion mit Tooltips und der Implementierung des Ameisenalgorithmus'.
Aufgrund der kleinen Gruppengröße war die Terminplanung relativ einfach. Es war möglich recht spontan Treffen nach den Vorlesungen durchzuführen.
Auf eine Rollenverteilung wurde verzichtet, da dies nach Empfinden der Entwickler bei zwei Personen kein Vorteil hat.
Die User Stories wurden handschriftlich erstellt. Auf eine spezielle Ticketsoftware zur Organisation der Story Cards wurde verzichtet, fast ausschließlich mit Pair Programming gearbeitet wurde und die Story Cards beiden Entwicklern zur Verfügung standen.

3.2 Technik:

Für ein Projekt dieser Größe ist es bereits ratsam, mit einer Versionierungssoftware zu arbeiten. Im Vorfeld des Projektes wurde in ausgewählten Vorlesungen die Software Git und die Hosting-Plattform Github vorgestellt. Git bietet alle wichtigen Funktionen einer fähigen Versionskontrolle und mit Github ist eine kostenfreie Bereitstellung eines Online-Repositorys gegeben. Die Entwickler entschieden sich für diese Variante.
Die Wahl der Programmiersprache fiel auf Java. Hier konnten die Studierenden bereits im Vorsemester Erfahrungen im Modul "Objektorientierte Programmierung" sammeln. Nach Ermessen der Entwickler bietet Java den Funktionsumfang um die Aufgabenstellung zu lösen.
Im Anschluss mussten die Entwickler eine Entwicklungsumgebung auswählen. Die Anforderungen an diese waren eine Unterstützung für Git, ein GUI-Builder und die freie Verfügbarkeit. Nach Recherche im Internet erwies sich die NetBeans IDE (Integrated Development Environment) als geeignet.

4. Implementierung

Als Referenz-Problem diente das schon beschriebene berlin52-TSP. Es ist Teil einer Sammlung von zahlreichen TSPs, die in einem genormten Dateiformat vorliegen. Das tsp-Dateiformat enthält jeweils den Namen, einen Kommentar, den TSP-Typ, die Anzahl der Städte und die Positionen der einzelnen Städte. Für die Positionen gibt es verschiedene Darstellungsvarianten, aber in Bezug auf berlin52 war nur die explizite Angabe von x- und y-Koordinaten von Relevanz. Eine Anforderung war das Laden dieses Dateiformates um das Referenzproblem lösen zu können. Hierfür wurde eine Dateiverwaltung geschaffen, die Laden und Speichern eines TSPs ermöglicht. Auf diese Weise kann ein Anwender auch eigene tsp-Dateien erschaffen und veröffentlichen. Auf die verschiedenen Formate der Lokalinformationen (zum Beispiel geographische Koordinaten) konnte leider aufgrund der knappen Zeit nicht eingegangen werden. Diese Formate lassen sich in den meisten Fällen laden, aber die Berechnung der Distanzen erfolgt nach der in [1.1 VERWEIS] angegeben euklidischen Formel.
Bei der Implementierung wurde viel Wert auf eine korrekte und optimale Darstellung der TSPs auf dem auf dem Bildschirm wertgelegt. Einige TSP haben auch negative Koordinaten und das Größenverhältnis verschiedener TSPs zu den Pixeln eines Computerbildschirms ist teilweise sehr unterschiedlich. Es wurde eine eigene Klasse "PaintPanel" implementiert, die alle Problemfaktoren bei der Darstellung berücksichtigt und jedes kompatible TSP abhängig von der Fenstergröße optimal skaliert und nicht verzerrt darstellt.
Bei der Implementierung des Ameisenalgorithmus wurde den Entwicklern kreativer Freiraum geboten. Der Ameisenalgorithmus ist ein Ablaufplan, dessen konkrete Umsetzung nicht genau definiert ist. Die Entwickler haben durch Ausprobieren verschiedener Varianten eine möglichst optimale Implementierung des Algorithmus entwickeln können. Der Algorithmus wird in mehreren Iterationen durchlaufen. Zu Beginn jeder Iteration wird eine zufällige Menge Pheromon in einem Intervall zwischen Null und dem Parameter tau0 (Initiales Pheromon) auf dem Streckennetz verteilt. Damit gleicht jeder Iteration einer eigenständigen neugestarteten Berechnung.
Innerhalb jeder Iteration führt jede Ameise ihre Aufgaben nacheiner durch. Eine Ameise wird zuerst auf eine zufällige Stadt gesetzt, dann sucht sie jeweils eine neue Stadt, bis eine gültige Lösung erreicht wurde. Nachdem die Ameise ihre Route erfolgreich beendet hat, verteilt sie ihr Pheromon auf den Strecken ihrer Route. Dabei wird das Verhältnis der Lösung mit der bisher besten gefunden Lösung ins Verhältnis gesetzt, sodass eine bessere Route einen höheren Pheromongehalt erhält. Anschließend wird nach jeder Ameise die Verdunstung aller Pheromone um den Parameter rho durchgeführt.
Diese Variante der Implementierung konnte bereits mehrmals die optimale Lösung des Referenzproblems ermitteln.

5. Fazit

Das Fazit der Studenten fällt durchgehend positiv aus. Die Möglichkeit ein eigenständiges Projekt durchführen zu können, erzeugte eine Motivation in besonderem Maße. Vor allem das Konzept der Story Cards kann als sehr wichtig eingestuft werden. Sie ermöglichen dem Entwicklungsteam ein Rahmen, in dem sich bewegt werden muss, ohne konkrete Vorgaben an die Implementierung vorzuschreiben.
Außerdem konnte das Pair Programming ausgiebig getestet werden. Hier zeigt sich eine geringe Fehlerquote. Dennoch lässt sich kein großer Verlust an Produktivität verzeichnen, obwohl nur eine Person dabei Programmcode produziert.
Die ersten Erfahrungen mit einer Versionierungssoftware können in zukünftigen Projekten gewinnbringend eingesetzt werden.
Viel Wissen wurde sich nach der Devise "learning by doing" angeeignet und die Java-Kenntnisse der Studenten konnte durch das Projekt weiter ausgeprägt werden.
